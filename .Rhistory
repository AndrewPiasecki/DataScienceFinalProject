# Subset the data using the selected columns
data_subset <- data[selected_cols]
# Perform PCA
pca <- prcomp(data_subset, scale = TRUE)
# Extract the principal components
pcs <- pca$x
# Print the principal components
print(pcs)
# Perform SVM analysis
# Assuming 'winner' as the target variable and 'team1_score', 'team2_score', 'team1_avg_age', 'team2_avg_age' as predictor variables
svm_model <- svm(winner ~ Winning_Pts + Losing_Pts, data = data, kernel = "linear")
# Perform SVM analysis
# Assuming 'winner' as the target variable and 'team1_score', 'team2_score', 'team1_avg_age', 'team2_avg_age' as predictor variables
svm_model <- svm(Winner ~ Winning_Pts + Losing_Pts, data = data, kernel = "linear")
# Perform SVM analysis
# Assuming 'winner' as the target variable and 'team1_score', 'team2_score', 'team1_avg_age', 'team2_avg_age' as predictor variables
data$Winner <- as.factor(data$Winner)
svm_model <- svm(Winner ~ Winning_Pts + Losing_Pts, data = data, kernel = "linear")
# Print the SVM model summary
print(svm_model)
# Make predictions using the SVM model
predictions <- predict(svm_model, newdata = df)
# Evaluate model performance
confusion_matrix <- table(predictions, df$winner)
accuracy <- sum(diag(confusion_matrix))/sum(confusion_matrix)
cat("Accuracy:", round(accuracy, 3), "\n")
# Fit the model on the training set
set.seed(123)
model <- train(
Winner ~ Winning_Pts , data, method = "svmLinear",
trControl = trainControl("cv", number = 10),
preProcess = c("center","scale")
)
# Make predictions on the test data
predicted.classes <- model %>% predict(data)
head(predicted.classes)
mean(predicted.classes == data$Winner)
mean(predicted.classes == data$Winning_Pts)
model <- train(
Winning_Pts ~ Losing_Pts , data, method = "svmLinear",
trControl = trainControl("cv", number = 10),
preProcess = c("center","scale")
)
# Make predictions on the test data
predicted.classes <- model %>% predict(data)
head(predicted.classes)
mean(predicted.classes == data$Winning_Pts)
# Fit the model on the training set
set.seed(123)
model <- train(
Winning_Pts ~ Losing_Pts, data = data, method = "svmLinear",
trControl = trainControl("cv", number = 10),
tuneGrid = expand.grid(C = seq(0, 2, length = 20)),
preProcess = c("center","scale")
)
View(data)
Average_Points <- (data$Winning_Pts + data$Losing_Pts) / 52
Average_Points
Average_Points <- (sum(data$Winning_Pts) + (data$Losing_Pts)) / 52
Average_Points
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
model <- train(
Winning_Pts ~ Average_Points , data, method = "svmLinear",
trControl = trainControl("cv", number = 10),
preProcess = c("center","scale")
)
# Split the data into training and test set
set.seed(123)
training.samples <- data$Winning_Pts %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- data[training.samples, ]
test.data <- data[-training.samples, ]
# Build the model
model <- lm(Winning_Pts ~ Losing_Pts, data)
# Make predictions and compute the R2, RMSE and MAE
predictions <- model %>% predict(data)
data.frame( R2 = R2(predictions, data$Winning_Pts),
RMSE = RMSE(predictions, data$Winning_Pts),
MAE = MAE(predictions, data$Winning_Pts))
RMSE(predictions, data$Winning_Pts)/mean(data$Winning_Pts)
plot(model)
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
model <- train(Winning_Pts ~., data, method = "lm",
trControl = train.control)
# Train the model
model <- train(Winning_Pts ~ Losing_Pts, data, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(Winning_Pts ~ Losing_Pts, data, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
RMSE(predictions, data$Winning_Pts)/mean(data$Winning_Pts)
plot(model)
# Split the data into training and test set
set.seed(123)
training.samples <- data$Winning_Pts %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- data[training.samples, ]
test.data <- data[-training.samples, ]
# Build the model
model <- lm(Winning_Pts ~ Losing_Pts, data)
# Make predictions and compute the R2, RMSE and MAE
predictions <- model %>% predict(data)
data.frame( R2 = R2(predictions, data$Winning_Pts),
RMSE = RMSE(predictions, data$Winning_Pts),
MAE = MAE(predictions, data$Winning_Pts))
RMSE(predictions, data$Winning_Pts)/mean(data$Winning_Pts)
plot(model)
plot(model)
# Read the data into a data frame
data <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/super_bowl.csv")
Date <- data$Date
SB <- data$SB
Attendance <- data$Attendance
QB_Winner <- data$QB_Winner
Coach_Winner <- data$Coach_Winner
Winner <- data$Winner
Winning_Pts <- data$Winning_Pts
QB_Loser <- data$QB_Loser
Coach_Loser <- data$Coach_Loser
Loser <- data$Loser
Losing_Pts <- data$Losing_Pts
MVP <- data$MVP
Stadium <- data$Stadium
City <- data$City
State <- data$State
Point_Difference <- data$Point_Difference
Referee <- data$Referee
Umpire <- data$Umpire
Head_Linesman <- data$Head_Linesman
Line_Judge <- data$Line_Judge
Field_Judge <- data$Field_Judge
Back_Judge <- data$Back_Judge
Side_Judge <- data$Side_Judge
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
DataFrame <- data.frame(Date,SB,Attendance,QB_Winner,Coach_Winner,Winner,Winning_Pts,QB_Loser,Coach_Loser,Loser,Losing_Pts,MVP,Stadium,City,State,Point_Difference,Referee,Umpire,Head_Linesman,Line_Judge,Field_Judge,Back_Judge,Side_Judge)
# Load the required packages
install.packages("readxl")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("kernlab")
library(readxl)
library(stats)
library(tidyverse)
library(caret)
library(kernlab)
library(FactoMineR)
library(factoextra)
library(e1071)
library(ggplot2)
# Read the data into a data frame
data <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/super_bowl.csv")
install.packages("FactoMineR")
install.packages("kernlab")
install.packages("factoextra")
Date <- data$Date
SB <- data$SB
Attendance <- data$Attendance
QB_Winner <- data$QB_Winner
Coach_Winner <- data$Coach_Winner
Winner <- data$Winner
Winning_Pts <- data$Winning_Pts
QB_Loser <- data$QB_Loser
Coach_Loser <- data$Coach_Loser
Loser <- data$Loser
Losing_Pts <- data$Losing_Pts
MVP <- data$MVP
Stadium <- data$Stadium
City <- data$City
State <- data$State
Point_Difference <- data$Point_Difference
Referee <- data$Referee
Umpire <- data$Umpire
Head_Linesman <- data$Head_Linesman
Line_Judge <- data$Line_Judge
Field_Judge <- data$Field_Judge
Back_Judge <- data$Back_Judge
Side_Judge <- data$Side_Judge
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
DataFrame <- data.frame(Date,SB,Attendance,QB_Winner,Coach_Winner,Winner,Winning_Pts,QB_Loser,Coach_Loser,Loser,Losing_Pts,MVP,Stadium,City,State,Point_Difference,Referee,Umpire,Head_Linesman,Line_Judge,Field_Judge,Back_Judge,Side_Judge)
# Select the columns you want to use for PCA
selected_cols <- c("Attendance", "Winning_Pts", "Losing_Pts", "Point_Difference")
# Subset the data using the selected columns
data_subset <- data[selected_cols]
# Perform PCA
pca <- prcomp(data_subset, scale = TRUE)
# Extract the principal components
pcs <- pca$x
# Print the principal components
print(pcs)
pca <- PCA(data_subset, scale.unit = TRUE, ncp = 5)
get_eigenvalue(pca)
fviz_eig(pca)
install.packages("factoextra")
install.packages("kernlab")
fviz_pca_biplot(pca)
install.packages("readxl")
# Load the required packages
install.packages("readxl")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("kernlab")
library(readxl)
library(stats)
library(tidyverse)
library(caret)
library(kernlab)
library(FactoMineR)
library(factoextra)
library(e1071)
library(ggplot2)
# Read the data into a data frame
data <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/super_bowl.csv")
Date <- data$Date
SB <- data$SB
Attendance <- data$Attendance
QB_Winner <- data$QB_Winner
Coach_Winner <- data$Coach_Winner
Winner <- data$Winner
Winning_Pts <- data$Winning_Pts
QB_Loser <- data$QB_Loser
Coach_Loser <- data$Coach_Loser
Loser <- data$Loser
Losing_Pts <- data$Losing_Pts
MVP <- data$MVP
Stadium <- data$Stadium
City <- data$City
State <- data$State
Point_Difference <- data$Point_Difference
Referee <- data$Referee
Umpire <- data$Umpire
Head_Linesman <- data$Head_Linesman
Line_Judge <- data$Line_Judge
Field_Judge <- data$Field_Judge
Back_Judge <- data$Back_Judge
Side_Judge <- data$Side_Judge
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
DataFrame <- data.frame(Date,SB,Attendance,QB_Winner,Coach_Winner,Winner,Winning_Pts,QB_Loser,Coach_Loser,Loser,Losing_Pts,MVP,Stadium,City,State,Point_Difference,Referee,Umpire,Head_Linesman,Line_Judge,Field_Judge,Back_Judge,Side_Judge)
# Select the columns you want to use for PCA
selected_cols <- c("Attendance", "Winning_Pts", "Losing_Pts", "Point_Difference")
# Subset the data using the selected columns
data_subset <- data[selected_cols]
# Perform PCA
pca <- prcomp(data_subset, scale = TRUE)
# Extract the principal components
pcs <- pca$x
# Print the principal components
print(pcs)
pca <- PCA(data_subset, scale.unit = TRUE, ncp = 5)
get_eigenvalue(pca)
fviz_eig(pca)
fviz_pca_biplot(pca)
install.packages("kernlab")
install.packages("FactoMineR")
install.packages("readxl")
install.packages("factoextra")
# Load the required packages
install.packages("readxl")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("kernlab")
library(readxl)
library(stats)
library(tidyverse)
library(caret)
library(kernlab)
library(FactoMineR)
library(factoextra)
library(e1071)
library(ggplot2)
# Read the data into a data frame
data <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/super_bowl.csv")
Date <- data$Date
SB <- data$SB
Attendance <- data$Attendance
QB_Winner <- data$QB_Winner
Coach_Winner <- data$Coach_Winner
Winner <- data$Winner
Winning_Pts <- data$Winning_Pts
QB_Loser <- data$QB_Loser
Coach_Loser <- data$Coach_Loser
Loser <- data$Loser
Losing_Pts <- data$Losing_Pts
MVP <- data$MVP
Stadium <- data$Stadium
City <- data$City
State <- data$State
Point_Difference <- data$Point_Difference
Referee <- data$Referee
Umpire <- data$Umpire
Head_Linesman <- data$Head_Linesman
Line_Judge <- data$Line_Judge
Field_Judge <- data$Field_Judge
Back_Judge <- data$Back_Judge
Side_Judge <- data$Side_Judge
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
DataFrame <- data.frame(Date,SB,Attendance,QB_Winner,Coach_Winner,Winner,Winning_Pts,QB_Loser,Coach_Loser,Loser,Losing_Pts,MVP,Stadium,City,State,Point_Difference,Referee,Umpire,Head_Linesman,Line_Judge,Field_Judge,Back_Judge,Side_Judge)
# Select the columns you want to use for PCA
selected_cols <- c("Attendance", "Winning_Pts", "Losing_Pts", "Point_Difference")
# Subset the data using the selected columns
data_subset <- data[selected_cols]
# Perform PCA
pca <- prcomp(data_subset, scale = TRUE)
# Extract the principal components
pcs <- pca$x
# Print the principal components
print(pcs)
pca <- PCA(data_subset, scale.unit = TRUE, ncp = 5)
get_eigenvalue(pca)
fviz_eig(pca)
fviz_pca_biplot(pca)
# Split the data into training and test set
set.seed(123)
training.samples <- data$Winning_Pts %>%
install.packages("kernlab")
createDataPartition(p = 0.8, list = FALSE)
install.packages("FactoMineR")
install.packages("readxl")
install.packages("factoextra")
# Load the required packages
install.packages("readxl")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("kernlab")
library(readxl)
library(stats)
library(tidyverse)
library(caret)
library(kernlab)
library(FactoMineR)
library(factoextra)
library(e1071)
library(ggplot2)
# Read the data into a data frame
data <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/super_bowl.csv")
Date <- data$Date
SB <- data$SB
Attendance <- data$Attendance
QB_Winner <- data$QB_Winner
Coach_Winner <- data$Coach_Winner
Winner <- data$Winner
Winning_Pts <- data$Winning_Pts
QB_Loser <- data$QB_Loser
Coach_Loser <- data$Coach_Loser
Loser <- data$Loser
Losing_Pts <- data$Losing_Pts
MVP <- data$MVP
Stadium <- data$Stadium
City <- data$City
State <- data$State
Point_Difference <- data$Point_Difference
Referee <- data$Referee
Umpire <- data$Umpire
Head_Linesman <- data$Head_Linesman
Line_Judge <- data$Line_Judge
Field_Judge <- data$Field_Judge
Back_Judge <- data$Back_Judge
Side_Judge <- data$Side_Judge
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
DataFrame <- data.frame(Date,SB,Attendance,QB_Winner,Coach_Winner,Winner,Winning_Pts,QB_Loser,Coach_Loser,Loser,Losing_Pts,MVP,Stadium,City,State,Point_Difference,Referee,Umpire,Head_Linesman,Line_Judge,Field_Judge,Back_Judge,Side_Judge)
# Select the columns you want to use for PCA
selected_cols <- c("Attendance", "Winning_Pts", "Losing_Pts", "Point_Difference")
# Subset the data using the selected columns
data_subset <- data[selected_cols]
# Perform PCA
pca <- prcomp(data_subset, scale = TRUE)
# Extract the principal components
pcs <- pca$x
# Print the principal components
print(pcs)
pca <- PCA(data_subset, scale.unit = TRUE, ncp = 5)
get_eigenvalue(pca)
fviz_eig(pca)
install.packages("kernlab")
install.packages("factoextra")
install.packages("FactoMineR")
fviz_pca_biplot(pca)
# Split the data into training and test set
install.packages("readxl")
set.seed(123)
training.samples <- data$Winning_Pts %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- data[training.samples, ]
test.data <- data[-training.samples, ]
# Build the model
model <- lm(Winning_Pts ~ Losing_Pts, data)
# Make predictions and compute the R2, RMSE and MAE
predictions <- model %>% predict(data)
data.frame( R2 = R2(predictions, data$Winning_Pts),
RMSE = RMSE(predictions, data$Winning_Pts),
MAE = MAE(predictions, data$Winning_Pts))
plot(model)
RMSE(predictions, data$Winning_Pts)/mean(data$Winning_Pts)
plot(model)
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
model <- train(Winning_Pts ~ Losing_Pts, data, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
install.packages("FactoMineR")
install.packages("factoextra")
# Load the required packages
install.packages("readxl")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("kernlab")
library(readxl)
library(stats)
library(tidyverse)
library(caret)
library(kernlab)
library(FactoMineR)
library(factoextra)
library(e1071)
library(ggplot2)
# Read the data into a data frame
data <- read_csv("https://raw.githubusercontent.com/reisanar/datasets/master/super_bowl.csv")
Date <- data$Date
SB <- data$SB
Attendance <- data$Attendance
QB_Winner <- data$QB_Winner
Coach_Winner <- data$Coach_Winner
Winner <- data$Winner
Winning_Pts <- data$Winning_Pts
QB_Loser <- data$QB_Loser
Coach_Loser <- data$Coach_Loser
Loser <- data$Loser
Losing_Pts <- data$Losing_Pts
MVP <- data$MVP
Stadium <- data$Stadium
City <- data$City
State <- data$State
Point_Difference <- data$Point_Difference
Referee <- data$Referee
Umpire <- data$Umpire
Head_Linesman <- data$Head_Linesman
Line_Judge <- data$Line_Judge
Field_Judge <- data$Field_Judge
Back_Judge <- data$Back_Judge
Side_Judge <- data$Side_Judge
Average_Points <- (sum(data$Winning_Pts) + sum(data$Losing_Pts)) / 52
Average_Points
DataFrame <- data.frame(Date,SB,Attendance,QB_Winner,Coach_Winner,Winner,Winning_Pts,QB_Loser,Coach_Loser,Loser,Losing_Pts,MVP,Stadium,City,State,Point_Difference,Referee,Umpire,Head_Linesman,Line_Judge,Field_Judge,Back_Judge,Side_Judge)
# Select the columns you want to use for PCA
selected_cols <- c("Attendance", "Winning_Pts", "Losing_Pts", "Point_Difference")
# Subset the data using the selected columns
data_subset <- data[selected_cols]
# Perform PCA
pca <- prcomp(data_subset, scale = TRUE)
# Extract the principal components
pcs <- pca$x
# Print the principal components
print(pcs)
pca <- PCA(data_subset, scale.unit = TRUE, ncp = 5)
get_eigenvalue(pca)
fviz_eig(pca)
fviz_pca_biplot(pca)
install.packages("kernlab")
# Split the data into training and test set
install.packages("FactoMineR")
set.seed(123)
training.samples <- data$Winning_Pts %>%
createDataPartition(p = 0.8, list = FALSE)
install.packages("readxl")
train.data  <- data[training.samples, ]
test.data <- data[-training.samples, ]
# Build the model
model <- lm(Winning_Pts ~ Losing_Pts, data)
# Make predictions and compute the R2, RMSE and MAE
predictions <- model %>% predict(data)
data.frame( R2 = R2(predictions, data$Winning_Pts),
RMSE = RMSE(predictions, data$Winning_Pts),
MAE = MAE(predictions, data$Winning_Pts))
plot(model)
RMSE(predictions, data$Winning_Pts)/mean(data$Winning_Pts)
plot(model)
# Define training control
train.control <- trainControl(method = "LOOCV")
# Train the model
model <- train(Winning_Pts ~ Losing_Pts, data, method = "lm",
trControl = train.control)
install.packages("factoextra")
# Summarize the results
print(model)
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(Winning_Pts ~ Losing_Pts, data, method = "lm",
trControl = train.control)
# Summarize the results
print(model)
